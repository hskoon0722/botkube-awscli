name: Deploy Botkube plugins on GitHub Release

on:
  push:
    tags:
      - "*"

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      # 실제로 dist/ 아래 실행파일을 빌드합니다 (스냅샷 이름: executor_aws_linux_*)
      - name: Build plugins
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: build --clean --snapshot

      - name: Bundle AWS CLI + glibc (amd64)
        run: |
          set -euo pipefail
          work="dist/bundle_amd64"
          rm -rf "$work" && mkdir -p "$work/awscli" "$work/glibc"

          # 1) AWS CLI v2 다운 및 dist만 복사
          curl -sSL -o /tmp/awscli.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
          unzip -q /tmp/awscli.zip -d /tmp/awscli
          cp -a /tmp/awscli/aws/dist "$work/awscli/"

          # 2) aws 바이너리가 요구하는 so들과 인터프리터(로더) 수집
          bin="$work/awscli/dist/aws"
          ldd "$bin" | tee /tmp/ldd.txt
          # 인터프리터 경로(예: /lib64/ld-linux-x86-64.so.2)
          interp="$(awk '/ld-linux/ {print $3} /interpreter/ {print $1}' /tmp/ldd.txt | head -n1)"
          cp -L "$interp" "$work/glibc/"

          # 필요 so 복사
          awk '{print $3}' /tmp/ldd.txt | grep -E '^/' | while read -r so; do
            cp -L "$so" "$work/glibc/"
          done

          # 3) 번들 tar.gz 생성
          tar -C "$work" -czf dist/aws_linux_amd64.tar.gz awscli glibc

      # 릴리즈 자산을 가리키는 index 생성 (정확한 들여쓰기 보장)
      - name: Generate plugins-index.yaml
        shell: bash
        run: |
          set -Eeuo pipefail
          TAG="${GITHUB_REF#refs/tags/}"
          BASE="https://github.com/${GITHUB_REPOSITORY}/releases/download/${TAG}"
          echo "URL BASE: $BASE"
          ls -l dist || true

          NAME="aws"
          TYPE="executor"
          DESC="Run AWS CLI from chat."
          VERSION="0.1.0"

          {
            printf "entries:\n"
            printf "  - name: %s\n" "$NAME"
            printf "    type: %s\n" "$TYPE"
            printf "    description: %s\n" "$DESC"
            printf "    version: %s\n" "$VERSION"
            printf "    urls:\n"
            if [[ -f dist/executor_aws_linux_amd64 ]]; then
              printf "      - url: %s/executor_aws_linux_amd64\n" "$BASE"
              printf "        platform:\n"
              printf "          os: linux\n"
              printf "          architecture: amd64\n"
            fi
            if [[ -f dist/executor_aws_linux_arm64 ]]; then
              printf "      - url: %s/executor_aws_linux_arm64\n" "$BASE"
              printf "        platform:\n"
              printf "          os: linux\n"
              printf "          architecture: arm64\n"
            fi
            printf "    jsonSchema:\n"
            printf "      value: |-\n"
          } > plugins-index.yaml

          # JSON 본문은 8칸 들여쓰기 적용
          sed 's/^/        /' >> plugins-index.yaml <<'JSON'
          {
            "$schema":"http://json-schema.org/draft-04/schema#",
            "title":"aws",
            "type":"object",
            "properties":{
              "defaultRegion":{"type":"string"},
              "prependArgs":{"type":"array","items":{"type":"string"}},
              "allowed":{"type":"array","items":{"type":"string"}},
              "env":{"type":"object","additionalProperties":{"type":"string"}}
            },
            "additionalProperties": false
          }
          JSON

          echo "    recommended: false" >> plugins-index.yaml

          {
            printf "    dependencies:\n"
            printf "      - name: aws\n"
            printf "        urls:\n"
            printf "          - url: %s/aws_linux_amd64.tar.gz//aws\n" "$BASE"
            printf "            platform:\n"
            printf "              os: linux\n"
            printf "              architecture: amd64\n"
            printf "          - url: %s/aws_linux_arm64.tar.gz//aws\n" "$BASE"
            printf "            platform:\n"
            printf "              os: linux\n"
            printf "              architecture: arm64\n"
          } >> plugins-index.yaml

          echo "----- GENERATED INDEX -----"
          sed -n '1,200p' plugins-index.yaml

          # (안전장치) YAML 파싱 확인: 여기서 실패하면 봇까지 안 갑니다.
          python3 - <<'PY'
          import yaml, sys
          with open('plugins-index.yaml', 'rb') as f:
              yaml.safe_load(f)
          print('YAML looks valid.')
          PY

      - name: Create or update GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
          PLUGIN_DOWNLOAD_URL_BASE_PATH: "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}"
        shell: bash
        run: |
          TAG="${GITHUB_REF#refs/tags/}"

          # 1) release.md 생성
          cat << EOF > release.md
          Botkube Plugins **${TAG}** are now available!
          To use them:
          ```yaml
          plugins:
            repositories:
              ${{ github.event.repository.name }}:
                url: ${PLUGIN_DOWNLOAD_URL_BASE_PATH}/plugins-index.yaml
          ```
          EOF

          # 2) 릴리스 생성/업데이트
          gh release view "$TAG" >/dev/null 2>&1 || gh release create "$TAG" --notes-file release.md

          # 3) 에셋 업로드
          shopt -s nullglob
          assets=(dist/executor_* dist/aws_linux_*.tar.gz plugins-index.yaml)
          echo "Uploading assets: ${assets[*]}"
          if ((${#assets[@]})); then
            gh release upload "$TAG" "${assets[@]}" --clobber
          else
            echo "No assets to upload."
          fi

      - name: Show index URL
        run: echo "Index URL => https://github.com/${GITHUB_REPOSITORY}/releases/download/${GITHUB_REF#refs/tags/}/plugins-index.yaml"
